// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			StoreIndoorEnvironmentObservedFunc: func(ctx context.Context, i IndoorEnvironmentObserved) error {
//				panic("mock out the StoreIndoorEnvironmentObserved method")
//			},
//			StoreWaterConsumptionObservedFunc: func(ctx context.Context, w WaterConsumptionObserved) error {
//				panic("mock out the StoreWaterConsumptionObserved method")
//			},
//			StoreWeatherObservedFunc: func(ctx context.Context, w WeatherObserved) error {
//				panic("mock out the StoreWeatherObserved method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// StoreIndoorEnvironmentObservedFunc mocks the StoreIndoorEnvironmentObserved method.
	StoreIndoorEnvironmentObservedFunc func(ctx context.Context, i IndoorEnvironmentObserved) error

	// StoreWaterConsumptionObservedFunc mocks the StoreWaterConsumptionObserved method.
	StoreWaterConsumptionObservedFunc func(ctx context.Context, w WaterConsumptionObserved) error

	// StoreWeatherObservedFunc mocks the StoreWeatherObserved method.
	StoreWeatherObservedFunc func(ctx context.Context, w WeatherObserved) error

	// calls tracks calls to the methods.
	calls struct {
		// StoreIndoorEnvironmentObserved holds details about calls to the StoreIndoorEnvironmentObserved method.
		StoreIndoorEnvironmentObserved []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// I is the i argument value.
			I IndoorEnvironmentObserved
		}
		// StoreWaterConsumptionObserved holds details about calls to the StoreWaterConsumptionObserved method.
		StoreWaterConsumptionObserved []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W WaterConsumptionObserved
		}
		// StoreWeatherObserved holds details about calls to the StoreWeatherObserved method.
		StoreWeatherObserved []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W WeatherObserved
		}
	}
	lockStoreIndoorEnvironmentObserved sync.RWMutex
	lockStoreWaterConsumptionObserved  sync.RWMutex
	lockStoreWeatherObserved           sync.RWMutex
}

// StoreIndoorEnvironmentObserved calls StoreIndoorEnvironmentObservedFunc.
func (mock *StorageMock) StoreIndoorEnvironmentObserved(ctx context.Context, i IndoorEnvironmentObserved) error {
	if mock.StoreIndoorEnvironmentObservedFunc == nil {
		panic("StorageMock.StoreIndoorEnvironmentObservedFunc: method is nil but Storage.StoreIndoorEnvironmentObserved was just called")
	}
	callInfo := struct {
		Ctx context.Context
		I   IndoorEnvironmentObserved
	}{
		Ctx: ctx,
		I:   i,
	}
	mock.lockStoreIndoorEnvironmentObserved.Lock()
	mock.calls.StoreIndoorEnvironmentObserved = append(mock.calls.StoreIndoorEnvironmentObserved, callInfo)
	mock.lockStoreIndoorEnvironmentObserved.Unlock()
	return mock.StoreIndoorEnvironmentObservedFunc(ctx, i)
}

// StoreIndoorEnvironmentObservedCalls gets all the calls that were made to StoreIndoorEnvironmentObserved.
// Check the length with:
//
//	len(mockedStorage.StoreIndoorEnvironmentObservedCalls())
func (mock *StorageMock) StoreIndoorEnvironmentObservedCalls() []struct {
	Ctx context.Context
	I   IndoorEnvironmentObserved
} {
	var calls []struct {
		Ctx context.Context
		I   IndoorEnvironmentObserved
	}
	mock.lockStoreIndoorEnvironmentObserved.RLock()
	calls = mock.calls.StoreIndoorEnvironmentObserved
	mock.lockStoreIndoorEnvironmentObserved.RUnlock()
	return calls
}

// StoreWaterConsumptionObserved calls StoreWaterConsumptionObservedFunc.
func (mock *StorageMock) StoreWaterConsumptionObserved(ctx context.Context, w WaterConsumptionObserved) error {
	if mock.StoreWaterConsumptionObservedFunc == nil {
		panic("StorageMock.StoreWaterConsumptionObservedFunc: method is nil but Storage.StoreWaterConsumptionObserved was just called")
	}
	callInfo := struct {
		Ctx context.Context
		W   WaterConsumptionObserved
	}{
		Ctx: ctx,
		W:   w,
	}
	mock.lockStoreWaterConsumptionObserved.Lock()
	mock.calls.StoreWaterConsumptionObserved = append(mock.calls.StoreWaterConsumptionObserved, callInfo)
	mock.lockStoreWaterConsumptionObserved.Unlock()
	return mock.StoreWaterConsumptionObservedFunc(ctx, w)
}

// StoreWaterConsumptionObservedCalls gets all the calls that were made to StoreWaterConsumptionObserved.
// Check the length with:
//
//	len(mockedStorage.StoreWaterConsumptionObservedCalls())
func (mock *StorageMock) StoreWaterConsumptionObservedCalls() []struct {
	Ctx context.Context
	W   WaterConsumptionObserved
} {
	var calls []struct {
		Ctx context.Context
		W   WaterConsumptionObserved
	}
	mock.lockStoreWaterConsumptionObserved.RLock()
	calls = mock.calls.StoreWaterConsumptionObserved
	mock.lockStoreWaterConsumptionObserved.RUnlock()
	return calls
}

// StoreWeatherObserved calls StoreWeatherObservedFunc.
func (mock *StorageMock) StoreWeatherObserved(ctx context.Context, w WeatherObserved) error {
	if mock.StoreWeatherObservedFunc == nil {
		panic("StorageMock.StoreWeatherObservedFunc: method is nil but Storage.StoreWeatherObserved was just called")
	}
	callInfo := struct {
		Ctx context.Context
		W   WeatherObserved
	}{
		Ctx: ctx,
		W:   w,
	}
	mock.lockStoreWeatherObserved.Lock()
	mock.calls.StoreWeatherObserved = append(mock.calls.StoreWeatherObserved, callInfo)
	mock.lockStoreWeatherObserved.Unlock()
	return mock.StoreWeatherObservedFunc(ctx, w)
}

// StoreWeatherObservedCalls gets all the calls that were made to StoreWeatherObserved.
// Check the length with:
//
//	len(mockedStorage.StoreWeatherObservedCalls())
func (mock *StorageMock) StoreWeatherObservedCalls() []struct {
	Ctx context.Context
	W   WeatherObserved
} {
	var calls []struct {
		Ctx context.Context
		W   WeatherObserved
	}
	mock.lockStoreWeatherObserved.RLock()
	calls = mock.calls.StoreWeatherObserved
	mock.lockStoreWeatherObserved.RUnlock()
	return calls
}
