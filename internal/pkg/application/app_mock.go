// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"sync"
)

// Ensure, that AppMock does implement App.
// If this is not the case, regenerate this file with moq.
var _ App = &AppMock{}

// AppMock is a mock implementation of App.
//
//	func TestSomethingThatUsesApp(t *testing.T) {
//
//		// make and configure a mocked App
//		mockedApp := &AppMock{
//			NotificationReceivedFunc: func(ctx context.Context, n Notification) error {
//				panic("mock out the NotificationReceived method")
//			},
//		}
//
//		// use mockedApp in code that requires App
//		// and then make assertions.
//
//	}
type AppMock struct {
	// NotificationReceivedFunc mocks the NotificationReceived method.
	NotificationReceivedFunc func(ctx context.Context, n Notification) error

	// calls tracks calls to the methods.
	calls struct {
		// NotificationReceived holds details about calls to the NotificationReceived method.
		NotificationReceived []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// N is the n argument value.
			N Notification
		}
	}
	lockNotificationReceived sync.RWMutex
}

// NotificationReceived calls NotificationReceivedFunc.
func (mock *AppMock) NotificationReceived(ctx context.Context, n Notification) error {
	if mock.NotificationReceivedFunc == nil {
		panic("AppMock.NotificationReceivedFunc: method is nil but App.NotificationReceived was just called")
	}
	callInfo := struct {
		Ctx context.Context
		N   Notification
	}{
		Ctx: ctx,
		N:   n,
	}
	mock.lockNotificationReceived.Lock()
	mock.calls.NotificationReceived = append(mock.calls.NotificationReceived, callInfo)
	mock.lockNotificationReceived.Unlock()
	return mock.NotificationReceivedFunc(ctx, n)
}

// NotificationReceivedCalls gets all the calls that were made to NotificationReceived.
// Check the length with:
//
//	len(mockedApp.NotificationReceivedCalls())
func (mock *AppMock) NotificationReceivedCalls() []struct {
	Ctx context.Context
	N   Notification
} {
	var calls []struct {
		Ctx context.Context
		N   Notification
	}
	mock.lockNotificationReceived.RLock()
	calls = mock.calls.NotificationReceived
	mock.lockNotificationReceived.RUnlock()
	return calls
}
